
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  password      String?
  phone         String?
  image         String    @default("https://images.pexels.com/photos/1681010/pexels-photo-1681010.jpeg?auto=compress&cs=tinysrgb&w=600")
  address       String?
  studentId     String?   @unique
  gender        String?
  role          String?  
  emailVerified Boolean  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Emergency contact
  emergencyContact EmergencyContact?

  // Notification preferences
  notificationPreferences NotificationPreference?

  // Relations
  currentBooking   Booking?        @relation("CurrentUserBooking")
  previousBookings Booking[]       @relation("UserBookingHistory")
  paymentMethods   PaymentMethod[]
  payments         Payment[]
  reviews          Review[]
  sessions         Session[]
  accounts         Account[]

  // Identification
  identification Identification? @relation("UserIdentification")

  @@map("users")
}

model Identification {
  id       String @id @default(cuid())
  name     String
  number   String
  type     String
  url      String?

  // Relations
  user   User   @relation("UserIdentification", fields: [userId], references: [id])
  userId String @unique

  @@map("identifications")
}

model EmergencyContact {
  id       String @id @default(cuid())
  name     String
  relation String
  phone    String
  // Relations
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @unique

  @@map("emergency_contacts")
}

model NotificationPreference {
  id         String  @id @default(cuid())
  booking    Boolean @default(true)
  payment    Boolean @default(true)
  promotions Boolean @default(false)
  newsletter Boolean @default(false)
  // Relations
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String  @unique

  @@map("notification_preferences")
}

model Warden {
  id        String   @id @default(cuid())
  name      String
  phone     String   @unique
  email     String?   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  hostels   Hostel[]

  @@map("wardens")
}

model Hostel {
  id           String   @id @default(cuid())
  name         String
  description  String
  type         String
  rooms        Int
  roomCapacity Int
  capacity     Int
  gender       String
  price        Decimal  @db.Decimal(10, 2)
  distance     String? // Storing as String to handle 'incampus' as well as numeric values
  rating       Float    @default(0)
  reviewCount  Int      @default(0)
  availability String
  featured     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Contact information
  contactEmail   String
  contactPhone   String
  contactWebsite String?

  // Location information
  address   String
  latitude  Float
  longitude Float

  // Media
  imageUrl String
  images   String[]

  // Rules and amenities
  rules     String[]
  amenities String[]

  // Relations
  warden   Warden    @relation(fields: [wardenId], references: [id])
  wardenId String
  bookings Booking[]
  reviews  Review[]

  @@map("hostels")
}

model Booking {
  id          String        @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  status      BookingStatus @default(PENDING)
  totalAmount Decimal       @db.Decimal(10, 2)
  semester    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  hostel        Hostel   @relation(fields: [hostelId], references: [id])
  hostelId      String
  // A booking can either be a current booking or a previous booking
  user          User?    @relation("UserBookingHistory", fields: [userId], references: [id])
  userId        String?
  // If this is a current booking, which user does it belong to
  currentUser   User?    @relation("CurrentUserBooking", fields: [currentUserId], references: [id])
  currentUserId String?  @unique // Each user can have only one current booking
  // Payment information
  payment       Payment?

  @@map("bookings")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("KES")
  status        PaymentStatus @default(UNPAID)
  paymentMethod PaymentType
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String  @unique
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  // Payment type specific details
  cardPayment  CardPayment?
  mpesaPayment MpesaPayment?

  @@map("payments")
}

model CardPayment {
  id            String   @id @default(cuid())
  transactionId String   @unique
  last4         String
  brand         String
  expiryMonth   Int
  expiryYear    Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId String  @unique

  @@map("card_payments")
}

model MpesaPayment {
  id                String   @id @default(cuid())
  transactionCode   String   @unique
  phoneNumber       String
  accountReference  String
  merchantRequestId String?
  checkoutRequestId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId String  @unique

  @@map("mpesa_payments")
}

model PaymentMethod {
  id        String      @id @default(cuid())
  type      PaymentType
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Card specific fields
  last4      String?
  expiryDate String?
  brand      String?

  // MPesa specific fields
  phoneNumber String?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("payment_methods")
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  hostel   Hostel @relation(fields: [hostelId], references: [id])
  hostelId String
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  // Each user can only review a hostel once
  @@unique([userId, hostelId])
  @@map("reviews")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@map("sessions")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verifications")
}

enum Role {
  USER
  ADMIN
  WARDEN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  REFUNDED
}

enum PaymentType {
  CARD
  MPESA
}
